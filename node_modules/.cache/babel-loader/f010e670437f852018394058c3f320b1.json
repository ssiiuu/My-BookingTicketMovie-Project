{"ast":null,"code":"import Axios from \"axios\";\nimport { DOMAIN, TOKEN_CYBERSOFT } from \"../util/configURL/constanURL\"; // import { store } from \"../index\";\n// import { DOMAIN, TOKEN_CYBERSOFT } from \"../configURL/constant\";\n// import {\n//   set_spinner_end,\n//   set_spinner_start,\n// } from \"../redux/action/spinnerAction\";\n\nimport localStorageServ from \"./locaStorage.service\";\n\nclass AxiosService {\n  constructor(params) {\n    this.getAxiosConfig = _token => {\n      // const token = _token ? _token : localStorageServ.accessToken.get();\n      this.axiosConfig = {\n        headers: {\n          TokenCybersoft: TOKEN_CYBERSOFT // Authorization: localStorageServ.userInfor?.get().accessToken,\n\n        }\n      };\n    };\n\n    this.removeAxiosConfig = () => {\n      this.axiosConfig = {\n        headers: {\n          iKeapy: ``,\n          \"Content-Type\": \"application/json\"\n        }\n      };\n    };\n\n    this.handleError = err => {\n      var _err$response;\n\n      const status = (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status;\n\n      switch (status // case 400:\n      // case 401:\n      // case 403:\n      //   window.location.assign(\"/lms\");\n      //   break;\n      // default:\n      //   break;\n      ) {}\n    };\n\n    this.axiosInstance = req => {\n      this.axios(req, this.axiosConfig);\n    };\n\n    this.axios = Axios.create({\n      baseURL: this.getBaseUrl()\n    });\n    this.getAxiosConfig();\n  }\n\n  getBaseUrl() {\n    return DOMAIN;\n  }\n\n  getMethod(uri) {\n    let loading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.handleFlow(this.axios.get(uri, this.axiosConfig), loading);\n  }\n\n  postMethod(uri, data) {\n    let loading = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.handleFlow(this.axios.post(uri, data, this.axiosConfig), loading);\n  }\n\n  putMethod(uri, data) {\n    let loading = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.handleFlow(this.axios.put(uri, data, this.axiosConfig), loading);\n  }\n\n  patchMethod(uri, data) {\n    let loading = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.handleFlow(this.axios.patch(uri, data, this.axiosConfig), loading);\n  }\n\n  deleteMethod(uri) {\n    let loading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.handleFlow(this.axios.delete(uri, this.axiosConfig), loading);\n  }\n\n  handleFlow(method) {\n    let loading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    // store.dispatch(set_spinner_start());\n    return new Promise((resolve, reject) => {\n      method.then(res => {\n        // store.dispatch(set_spinner_end());\n        resolve({\n          data: res.data,\n          status: res.status,\n          isSuccess: true\n        });\n      }).catch(err => {\n        // store.dispatch(set_spinner_end());\n        this.handleError(err);\n        reject({\n          err: err\n        });\n      });\n    });\n  }\n\n}\n\nconst AxiosServ = new AxiosService();\nexport default AxiosServ;","map":{"version":3,"sources":["C:/Users/siuhuynh/Desktop/BC-18/My-Movies-Project/src/services/axios.service.js"],"names":["Axios","DOMAIN","TOKEN_CYBERSOFT","localStorageServ","AxiosService","constructor","params","getAxiosConfig","_token","axiosConfig","headers","TokenCybersoft","removeAxiosConfig","iKeapy","handleError","err","status","response","axiosInstance","req","axios","create","baseURL","getBaseUrl","getMethod","uri","loading","handleFlow","get","postMethod","data","post","putMethod","put","patchMethod","patch","deleteMethod","delete","method","Promise","resolve","reject","then","res","isSuccess","catch","AxiosServ"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport { DOMAIN, TOKEN_CYBERSOFT } from \"../util/configURL/constanURL\";\r\n// import { store } from \"../index\";\r\n// import { DOMAIN, TOKEN_CYBERSOFT } from \"../configURL/constant\";\r\n// import {\r\n//   set_spinner_end,\r\n//   set_spinner_start,\r\n// } from \"../redux/action/spinnerAction\";\r\nimport localStorageServ from \"./locaStorage.service\";\r\n\r\nclass AxiosService {\r\n  axios;\r\n  axiosConfig;\r\n  authService;\r\n  constructor(params) {\r\n    this.axios = Axios.create({\r\n      baseURL: this.getBaseUrl(),\r\n    });\r\n    this.getAxiosConfig();\r\n  }\r\n\r\n  getBaseUrl() {\r\n    return DOMAIN;\r\n  }\r\n\r\n  getAxiosConfig = (_token) => {\r\n    // const token = _token ? _token : localStorageServ.accessToken.get();\r\n    this.axiosConfig = {\r\n      headers: {\r\n        TokenCybersoft: TOKEN_CYBERSOFT,\r\n        // Authorization: localStorageServ.userInfor?.get().accessToken,\r\n      },\r\n    };\r\n  };\r\n\r\n  removeAxiosConfig = () => {\r\n    this.axiosConfig = {\r\n      headers: {\r\n        iKeapy: ``,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n  };\r\n\r\n  getMethod(uri, loading = true) {\r\n    return this.handleFlow(this.axios.get(uri, this.axiosConfig), loading);\r\n  }\r\n\r\n  postMethod(uri, data, loading = true) {\r\n    return this.handleFlow(\r\n      this.axios.post(uri, data, this.axiosConfig),\r\n      loading\r\n    );\r\n  }\r\n\r\n  putMethod(uri, data, loading = true) {\r\n    return this.handleFlow(\r\n      this.axios.put(uri, data, this.axiosConfig),\r\n      loading\r\n    );\r\n  }\r\n\r\n  patchMethod(uri, data, loading = true) {\r\n    return this.handleFlow(\r\n      this.axios.patch(uri, data, this.axiosConfig),\r\n      loading\r\n    );\r\n  }\r\n\r\n  deleteMethod(uri, loading = true) {\r\n    return this.handleFlow(this.axios.delete(uri, this.axiosConfig), loading);\r\n  }\r\n\r\n  handleFlow(method, loading = true) {\r\n    // store.dispatch(set_spinner_start());\r\n    return new Promise((resolve, reject) => {\r\n      method\r\n        .then((res) => {\r\n          // store.dispatch(set_spinner_end());\r\n          resolve({\r\n            data: res.data,\r\n            status: res.status,\r\n            isSuccess: true,\r\n          });\r\n        })\r\n        .catch((err) => {\r\n          // store.dispatch(set_spinner_end());\r\n          this.handleError(err);\r\n          reject({\r\n            err: err,\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  handleError = (err) => {\r\n    const status = err.response?.status;\r\n    switch (\r\n      status\r\n      // case 400:\r\n      // case 401:\r\n      // case 403:\r\n      //   window.location.assign(\"/lms\");\r\n      //   break;\r\n      // default:\r\n      //   break;\r\n    ) {\r\n    }\r\n  };\r\n  //\r\n  axiosInstance = (req) => {\r\n    this.axios(req, this.axiosConfig);\r\n  };\r\n}\r\n\r\nconst AxiosServ = new AxiosService();\r\nexport default AxiosServ;\r\n"]},"metadata":{},"sourceType":"module"}